"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertApplicationCommandToApiData = exports.normalizeContextMenuCommand = exports.normalizeChatInputCommand = void 0;
const builders_1 = require("@discordjs/builders");
const utilities_1 = require("@sapphire/utilities");
require("discord-api-types/v9");
const discord_js_1 = require("discord.js");
function isBuilder(command) {
    return command instanceof builders_1.SlashCommandBuilder;
}
function normalizeChatInputCommand(command) {
    if ((0, utilities_1.isFunction)(command)) {
        const builder = new builders_1.SlashCommandBuilder();
        command(builder);
        const json = builder.toJSON();
        // TODO: once d.js updates builders version, remove this!!
        if (json.options) {
            json.options = json.options.map((option) => discord_js_1.ApplicationCommand['transformOption'](option));
        }
        return json;
    }
    if (isBuilder(command)) {
        const json = command.toJSON();
        // TODO: once d.js updates builders version, remove this!!
        if (json.options) {
            json.options = json.options.map((option) => discord_js_1.ApplicationCommand['transformOption'](option));
        }
        return json;
    }
    const finalObject = {
        description: command.description,
        name: command.name,
        default_permission: command.defaultPermission,
        type: 1 /* ChatInput */
    };
    if (command.options?.length) {
        finalObject.options = command.options.map((option) => discord_js_1.ApplicationCommand['transformOption'](option));
    }
    return finalObject;
}
exports.normalizeChatInputCommand = normalizeChatInputCommand;
function normalizeContextMenuCommand(command) {
    if ((0, utilities_1.isFunction)(command)) {
        const builder = new builders_1.ContextMenuCommandBuilder();
        command(builder);
        return builder.toJSON();
    }
    if (command instanceof builders_1.ContextMenuCommandBuilder) {
        return command.toJSON();
    }
    let type;
    switch (command.type) {
        case discord_js_1.Constants.ApplicationCommandTypes.MESSAGE:
        case 'MESSAGE':
            type = 3 /* Message */;
            break;
        case discord_js_1.Constants.ApplicationCommandTypes.USER:
        case 'USER':
            type = 2 /* User */;
            break;
        default:
            // @ts-expect-error command gets turned to never, which is half true.
            throw new Error(`Unhandled command type: ${command.type}`);
    }
    const finalObject = {
        name: command.name,
        type,
        default_permission: command.defaultPermission
    };
    return finalObject;
}
exports.normalizeContextMenuCommand = normalizeContextMenuCommand;
function convertApplicationCommandToApiData(command) {
    const returnData = {
        name: command.name,
        default_permission: command.defaultPermission
    };
    if (command.type === 'CHAT_INPUT') {
        returnData.type = 1 /* ChatInput */;
        returnData.description = command.description;
    }
    else if (command.type === 'MESSAGE') {
        returnData.type = 3 /* Message */;
    }
    else if (command.type === 'USER') {
        returnData.type = 2 /* User */;
    }
    if (command.options.length) {
        returnData.options = command.options.map((option) => discord_js_1.ApplicationCommand['transformOption'](option));
    }
    return returnData;
}
exports.convertApplicationCommandToApiData = convertApplicationCommandToApiData;
//# sourceMappingURL=normalizeInputs.js.map