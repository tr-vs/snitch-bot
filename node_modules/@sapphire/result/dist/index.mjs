var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });

// src/lib/Maybe.ts
function maybe(value) {
  return isMaybe(value) ? value : value === null ? none() : some(value);
}
__name(maybe, "maybe");
function some(x) {
  return { exists: true, value: x };
}
__name(some, "some");
function none() {
  return { exists: false };
}
__name(none, "none");
function isSome(x) {
  return x.exists;
}
__name(isSome, "isSome");
function isNone(x) {
  return !x.exists;
}
__name(isNone, "isNone");
function isMaybe(x) {
  return typeof x === "object" && x !== null && typeof Reflect.get(x, "exists") === "boolean";
}
__name(isMaybe, "isMaybe");

// src/lib/Result.ts
function ok(x) {
  return { success: true, value: x };
}
__name(ok, "ok");
function err(x) {
  return { success: false, error: x };
}
__name(err, "err");
function isOk(x) {
  return x.success;
}
__name(isOk, "isOk");
function isErr(x) {
  return !x.success;
}
__name(isErr, "isErr");

// src/lib/Parsers.ts
function from(cb) {
  try {
    return ok(cb());
  } catch (error) {
    return err(error);
  }
}
__name(from, "from");
async function fromAsync(promiseOrCb) {
  try {
    return ok(await (isFunction(promiseOrCb) ? promiseOrCb() : promiseOrCb));
  } catch (error) {
    return err(error);
  }
}
__name(fromAsync, "fromAsync");
function isFunction(input) {
  return typeof input === "function";
}
__name(isFunction, "isFunction");
export {
  err,
  from,
  fromAsync,
  isErr,
  isMaybe,
  isNone,
  isOk,
  isSome,
  maybe,
  none,
  ok,
  some
};
//# sourceMappingURL=index.mjs.map